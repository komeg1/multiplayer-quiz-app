
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@using System.Timers
@inject IQuizService QuizService
@inject IUserRepository UserRepository
@inject IQuizRepository QuizRepository
@inject IJSRuntime Js



<HeadContent>
    <link rel="stylesheet" href="app_client.css" />
</HeadContent>
@if (!_isLoaded)
{
    <span>Loading...</span>
}
else
{
    <div class="p-4">
    <div class="w-full h-[380px] p-8 bg-white rounded-lg shadow-lg">
     @if (_isQuizFinished)
      {
          <FinishedQuizView QuizDto="@ChosenQuiz" Score="@Score" Points="@PointsOvr" Experience="@Experience" Players="Players" GameMode="@GameMode"/>
    }
    else if(_isQuestionFinished)
    {
           
            <span class="bg-green-700 text-green-100 text-sm font-bold me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">Time: @_resultCountdownText</span>
            @if (_pickedCorrectAnswer)
            {
                <h2 class="mb-4 text-center text-3xl lg:text-6xl md:text-5xl font-extrabold text-green-700 leading-none">Correct! You got @_pointsThisRnd points</h2>
            }
            else
            {
                <h2 class="mb-4 text-center text-3xl lg:text-6xl md:text-5xl font-extrabold text-red-700 leading-none">Wrong 😬! You got 0 points</h2>
            }
            <h2 class="mb-4 text-center text-2xl font-bold leading-none tracking-tight text-black md:text-4xl lg:text-3xl dark:text-white">You have:@PointsOvr points 🔥</h2>

    }
    @if (ChosenQuiz != null && !_isQuizFinished && !_isQuestionFinished)
    {
        <span class="bg-green-700 text-green-100 text-sm font-bold me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">Time: @_countdownText</span>
        <span>Score: @Score/@ChosenQuiz.QuestionCount</span>
        <span>Points: @PointsOvr</span>
            <CurrentQuestion Question="CurrentQuestion" OnAnswerCheck="CheckAnswer" />
       
    }
    
    </div>
    </div>



}
@code {
    private const int MAX_QUESTION_SCORE = 100;
    private const int MAX_QUESTION_SECONDS = 15;
    private const int MAX_RESULT_SECONDS = 5;
    private const int ONE_SECOND = 1000;
    private const int CORRECT_ANS_EXP = 5;

    private bool _isQuestionFinished = false;
    private bool _isLoaded = false;
    private bool _isQuizFinished = false;
    private bool _pickedCorrectAnswer = false;


    private int _countdownSeconds = MAX_QUESTION_SECONDS;
    private int _resultSeconds = MAX_RESULT_SECONDS;
    private int _questionNr = 0;
    private int _experienceThisRnd = 0;
    private int _pointsThisRnd = 0;

    public int Score { get; set; } = 0;
    public int Experience { get; set; } = 0;
    public int PointsOvr { get; set; } = 0;
    public QuizDto? ChosenQuiz { get; set; }

    private string _countdownText => $"{_countdownSeconds/60:00}:{_countdownSeconds}";
    private string _resultCountdownText => $"{_resultSeconds / 60:00}:{_resultSeconds}";


    private Timer _questionTimer = null!;
    private Timer _resultTimer = null!;

    private UserQuizStampDto? _stampDto;

    public QuestionDto? CurrentQuestion;


    [Parameter]
    public PlayersInLobby? Players { get; set; } = null;
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public GameMode GameMode { get; set; }
    [Parameter]
    public HubConnection? HubConnection{ get; set; }
    [Parameter]
    public string? RoomCode{ get; set; }


    protected override async Task OnInitializedAsync()
    {
        if(Players != null)
        {
            foreach(var player in Players.Users)
            {
                //playersStandings.Add(player);
            }
            foreach (var player in Players.Guests)
            {
                //playersStandings.Add(player);
            }
        }

        ChosenQuiz = await QuizRepository.GetQuizDtoAsync(Int32.Parse(Id));
        CurrentQuestion = await QuizRepository.GetQuestionDtoAsync(ChosenQuiz.Id, _questionNr++);
        try
        {
            _stampDto = await UserRepository.SaveQuizStamp(new UserQuizStampDto { Quiz = ChosenQuiz, GameMode = GameMode});
        }
        catch (Exception ex)
        {
            Console.WriteLine("uzytkownik niezalogowany");
        }

        InitTimer(ref _questionTimer, OnQuestionTimedEvent);
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await Js.InvokeVoidAsync("window.initializeFlowbite");
            _isLoaded = true;
        }

    }

    public async void ChangeQuestion()
    {
        if (_questionNr < ChosenQuiz.QuestionCount)
        {
            CurrentQuestion = await QuizRepository.GetQuestionDtoAsync(ChosenQuiz.Id, _questionNr++);

        }
        else
        {
            _isQuestionFinished = false;
            _isQuizFinished = true;
            Dispose(_questionTimer);
            Dispose(_resultTimer);
            if (_stampDto != null)
                UpdateStampPoints((int)PointsOvr, Score, Experience);
            StateHasChanged();
        }



    }
    public async void IncrementScoreAsync()
    {
        try
        {
            await HubConnection.InvokeAsync("ChangePoints", RoomCode, HubConnection.ConnectionId, (int)PointsOvr);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public void IncrementScore()
    {
        Console.WriteLine(MAX_QUESTION_SCORE * (_countdownSeconds / MAX_QUESTION_SECONDS));
        _pointsThisRnd = (int)(MAX_QUESTION_SCORE * ((float)_countdownSeconds / (float)MAX_QUESTION_SECONDS));
        PointsOvr += _pointsThisRnd;
        Score++;
        _experienceThisRnd = CORRECT_ANS_EXP;
        Experience += CORRECT_ANS_EXP;
        if (GameMode == GameMode.MULTIPLAYER)
        {
            IncrementScoreAsync();
        }
        
    }
    public async void ShowQuestionResult()
    {
        _isQuestionFinished = true;
        if (_resultTimer is null)
        {
            Console.WriteLine("Timer zainicjalizowany");
            InitTimer(ref _resultTimer, OnResultTimedEvent);
        }
        else
        {
            _resultTimer.Start();
        }


        ChangeQuestion();

    }

    public async void CheckAnswer(QuestionChoiceDto answer)
    {
        
        if (await QuizService.CheckAnswer(CurrentQuestion.Id, answer) == true)
        {

            _pickedCorrectAnswer = true;
            IncrementScore();
        }
        ShowQuestionResult();

    }

    public async Task UpdateStampPoints(int points, int score, int experience)
    {
        UserRepository.UpdateStamp(_stampDto.Id, points, score, experience);

    }
    //TIMER METHODS
    void InitTimer(ref Timer timer, ElapsedEventHandler elapsedEvent)
    {
        timer = new Timer(ONE_SECOND);
        timer.Elapsed += elapsedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
        Console.WriteLine("Timer włączony");
    }
    private async void OnResultTimedEvent(object? sender, ElapsedEventArgs e)
    {
        try
        {
            _resultSeconds--;
            Console.WriteLine($"Jeszcze {_resultSeconds}");
            if (_resultSeconds == 0)
            {
                _resultTimer.Stop();
                _isQuestionFinished = false;
                _pickedCorrectAnswer = false;
                _pointsThisRnd = 0;
                _resultSeconds = MAX_RESULT_SECONDS;
                _countdownSeconds = MAX_QUESTION_SECONDS;
                _questionTimer.Start();


            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"{ ex.Message}");
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void OnQuestionTimedEvent(object? sender, ElapsedEventArgs e)
    {
        _countdownSeconds--;

        if (_countdownSeconds == 0)
        {
            _questionTimer.Stop();
            _countdownSeconds = MAX_QUESTION_SECONDS;
            ShowQuestionResult();
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
       
    }
    void Dispose(Timer timer)
    {
        timer?.Dispose();
    }



    
}
