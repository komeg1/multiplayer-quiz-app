@page "/quiz/{Id}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@using System.Timers
@inject IQuizService QuizService
@inject IUserRepository UserRepository
@inject IQuizRepository QuizRepository
@inject IJSRuntime Js



<h3>Quiz @Id</h3>
<HeadContent>
    <link rel="stylesheet" href="app_client.css" />
</HeadContent>
@if (!isLoaded)
{
    <span>Loading...</span>
}
else
{
    <div class="w-full p-8 bg-white rounded-lg shadow-lg">
     @if (isQuizFinished)
      {
        <h2 class="mb-4 text-center text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">Quiz finished</h2>
        <h5 class="mb-4 text-center text-4xl font-extrabold leading-none tracking-tight text-gray-400 md:text-5xl lg:text-6xl dark:text-white">Score: @score/@_chosenQuiz.QuestionCount</h5>

     }
    else if(isQuestionFinished)
    {
            <span class="bg-green-700 text-green-100 text-sm font-bold me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">Time: @ResultCountdownText</span>
            <h2 class="mb-4 text-center text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">You have:@points points 🔥</h2>

    }
    @if (_chosenQuiz != null && !isQuizFinished && !isQuestionFinished)
    {
        <span class="bg-green-700 text-green-100 text-sm font-bold me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">Time: @CountdownText</span>
        <span>Score: @score/@_chosenQuiz.QuestionCount</span>
        <span>Points: @points</span>
            <CurrentQuestion Question="_currentQuestion" OnAnswerCheck="CheckAnswer" />
       
    }
    
    </div>



}
@code {
    const int MAX_QUESTION_SCORE = 100;
    const int MAX_QUESTION_SECONDS = 15;
    const int MAX_RESULT_SECONDS = 5;
    const int ONE_SECOND = 1000;

    bool isQuestionFinished = false;
    bool isLoaded = false;
    bool isQuizFinished = false;


    int countdownSeconds = MAX_QUESTION_SECONDS;
    int resultSeconds = MAX_RESULT_SECONDS;
    string CountdownText => $"{countdownSeconds/60:00}:{countdownSeconds}";
    string ResultCountdownText => $"{resultSeconds / 60:00}:{resultSeconds}";


    int score = 0;
    float points = 0;
    int questionNr = 0;


    private Timer _questionTimer = null!;
    private Timer _resultTimer = null;

    private QuizDto? _chosenQuiz;
    private QuestionDto? _currentQuestion;
    private UserQuizStampDto? _stampDto;


    [Parameter]
    public string Id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _chosenQuiz = await QuizRepository.GetQuizDto(Int32.Parse(Id));
        _currentQuestion = await QuizRepository.GetQuestionDto(_chosenQuiz.Id, questionNr++);
        try
        {
            _stampDto = await UserRepository.SaveQuizStamp(_chosenQuiz.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine("uzytkownik niezalogowany");
        }

        InitTimer(ref _questionTimer, OnQuestionTimedEvent);
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await Js.InvokeVoidAsync("window.initializeFlowbite");
            isLoaded = true;
        }

    }

    public async void ChangeQuestion()
    {
        if (questionNr < _chosenQuiz.QuestionCount)
        {
            _currentQuestion = await QuizRepository.GetQuestionDto(_chosenQuiz.Id, questionNr++);

        }
        else
        {
            isQuestionFinished = false;
            isQuizFinished = true;
            Dispose(_questionTimer);
            Dispose(_resultTimer);
            if (_stampDto != null)
                UpdateStampPoints((int)points);
            StateHasChanged();
        }



    }
    public void IncrementScore()
    {
        Console.WriteLine(MAX_QUESTION_SCORE * (countdownSeconds / MAX_QUESTION_SECONDS));
        points += (MAX_QUESTION_SCORE * (float)((float)countdownSeconds / (float)MAX_QUESTION_SECONDS));
        score++;
        StateHasChanged();
    }
    public async void ShowQuestionResult()
    {

        if (_resultTimer is null)
        {
            InitTimer(ref _resultTimer, OnResultTimedEvent);
        }
        else
        {
            _resultTimer.Start();
        }
        isQuestionFinished = true;
        ChangeQuestion();

    }

    public async void CheckAnswer(QuestionChoiceDto answer)
    {
        if (await QuizService.CheckAnswer(_currentQuestion.Id, answer) == true)
        {
            IncrementScore();
        }
        ShowQuestionResult();
    }

    public async Task UpdateStampPoints(int points)
    {
        UserRepository.UpdateStampPoints(_stampDto.Id, points);

    }
    //TIMER METHODS
    void InitTimer(ref Timer timer, ElapsedEventHandler elapsedEvent)
    {
        timer = new Timer(ONE_SECOND);
        timer.Elapsed += elapsedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }
    private async void OnResultTimedEvent(object? sender, ElapsedEventArgs e)
    {
        resultSeconds--;
        if (resultSeconds == 0)
        {
            _resultTimer.Stop();

            resultSeconds = MAX_RESULT_SECONDS;
            countdownSeconds = MAX_QUESTION_SECONDS;
            _questionTimer.Start();            
            isQuestionFinished = false;

        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    private void OnQuestionTimedEvent(object? sender, ElapsedEventArgs e)
    {
        countdownSeconds--;

        if (countdownSeconds == 0)
        {
            _questionTimer.Stop();
            countdownSeconds = MAX_QUESTION_SECONDS;
            ShowQuestionResult();
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
       
    }
    void Dispose(Timer timer)
    {
        timer?.Dispose();
    }



    
}
