@using System.Timers
@inject IQuizService QuizService
@inject IQuizRepository QuizRepository

@page "/quiz/{Id}"
@rendermode InteractiveWebAssembly


<h3>Quiz @Id</h3>
<HeadContent>
    <link rel="stylesheet" href="app_client.css" />
</HeadContent>
@if (!isLoaded)
{
    <span>Loading...</span>
}
else
{
    <div class="w-full p-8 bg-white rounded-lg shadow-lg">
    @if(isQuestionFinished)
    {
            <span class="bg-green-700 text-green-100 text-sm font-bold me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">Time: @ResultCountdownText</span>
            <h2 class="mb-4 text-center text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">You have:@points points 🔥</h2>

    }
    @if (chosenQuiz != null && !isQuizFinished && !isQuestionFinished)
    {
        <span class="bg-green-700 text-green-100 text-sm font-bold me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">Time: @CountdownText</span>
        <span>Score: @score/@chosenQuiz.QuestionCount</span>
        <span>Points: @points</span>
            <CurrentQuestion Question="currentQuestion" OnAnswerCheck="CheckAnswer" />
       
    }
    else if (isQuizFinished)
    {
        <h2 class="mb-4 text-center text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">Quiz finished</h2>
        <h5 class="mb-4 text-center text-4xl font-extrabold leading-none tracking-tight text-gray-400 md:text-5xl lg:text-6xl dark:text-white">Score: @score/@chosenQuiz.QuestionCount</h5>

    }
    </div>



}
@code {
    const int MAX_QUESTION_SCORE = 100;
    const int MAX_QUESTION_SECONDS = 15;
    const int MAX_RESULT_SECONDS = 5;
    const int ONE_SECOND = 1000;

    bool isQuestionFinished = false;
    bool isLoaded = false;
    bool isQuizFinished = false;


    int countdownSeconds = MAX_QUESTION_SECONDS;
    int resultSeconds = MAX_RESULT_SECONDS;
    string CountdownText => $"{countdownSeconds/60:00}:{countdownSeconds}";
    string ResultCountdownText => $"{resultSeconds / 60:00}:{resultSeconds}";


    int score = 0;
    float points = 0;
    int questionNr = 0;


    Timer questionTimer = null!;
    Timer resultTimer = null;

    QuizDto chosenQuiz { get; set; }
    QuestionDto currentQuestion{ get; set; }

    [Parameter]
    public string Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        chosenQuiz = await QuizRepository.GetQuizDto(Int32.Parse(Id));
        currentQuestion = await QuizRepository.GetQuestionDto(chosenQuiz.Id, questionNr++);
        isLoaded = true;
        InitTimer(ref questionTimer, OnQuestionTimedEvent);
    }




    public async void CheckAnswer(QuestionChoiceDto answer)
    {
        if(await QuizService.CheckAnswer(currentQuestion.Id, answer) == true)
        {
            IncrementScore();
        }
            ShowQuestionResult();
    }

    public async void ChangeQuestion()
    {
        if (questionNr < chosenQuiz.QuestionCount)
        {
            currentQuestion = await QuizRepository.GetQuestionDto(chosenQuiz.Id, questionNr++);
            countdownSeconds = 15;
        }
        else
        {
            isQuizFinished = true;
            Dispose(questionTimer);
            Dispose(resultTimer);
        }
        StateHasChanged();
    }
    public void IncrementScore()
    {
        Console.WriteLine(MAX_QUESTION_SCORE * (countdownSeconds / MAX_QUESTION_SECONDS));
        points += (MAX_QUESTION_SCORE * (float)((float)countdownSeconds / (float)MAX_QUESTION_SECONDS));
        score++;
        StateHasChanged();
    }
    public async void ShowQuestionResult()
    {
        if (resultTimer is null)
        {
            InitTimer(ref resultTimer, OnResultTimedEvent);
        }
        else
        {
            resultTimer.Start();
        }
        isQuestionFinished = true;

    }
    //TIMER METHODS
    void InitTimer(ref Timer timer, ElapsedEventHandler elapsedEvent)
    {
        timer = new Timer(ONE_SECOND);
        timer.Elapsed += elapsedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }
    private void OnResultTimedEvent(object? sender, ElapsedEventArgs e)
    {
        resultSeconds--;
        if (resultSeconds == 0)
        {
            resultTimer.Stop();
            isQuestionFinished = false;
            resultSeconds = MAX_RESULT_SECONDS;
            questionTimer.Start();
            ChangeQuestion();
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    private void OnQuestionTimedEvent(object? sender, ElapsedEventArgs e)
    {
        countdownSeconds--;

        if (countdownSeconds == 0)
        {
            questionTimer.Stop();
            countdownSeconds = MAX_QUESTION_SECONDS;
            ShowQuestionResult();
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
       
    }
    void Dispose(Timer timer)
    {
        timer.Dispose();
    }



    
}
