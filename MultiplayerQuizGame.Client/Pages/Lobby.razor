@page "/lobby/{RoomCode}"
@inject NavigationManager NavigationManager
@inject IUserRepository UserRepository

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

@if(_isNotConnected)
{
    <h2 class="mb-4 text-center text-4xl font-extrabold text-red-900">Lobby is full or doesn't exist!</h2>
}

@if(CurrentRoom != null)
{
     <h2 class="mb-4 text-center text-4xl font-extrabold text-white">Room @RoomCode</h2>
    @if (_isGameStarted)
    {
        <QuizGame Id="@CurrentRoom!.Quiz.Id.ToString()" GameMode="@GameMode.MULTIPLAYER" HubConnection="@HubConnection" RoomCode="@RoomCode"/>
    }

        <Scoreboard Players="@Players" CurrentRoom="@CurrentRoom" IsReadyButtonEnabled="@IsReadyButtonEnabled" HubConnection="@HubConnection" ReadyButtonHandler="@HandleReadyButton"/>

}

@code {
    [Parameter]
    public string RoomCode { get; set; }

    public HubConnection? HubConnection { get; set; }
    public RoomDto? CurrentRoom { get; set; }
    public PlayersInLobby Players = new();
    public bool IsReadyButtonEnabled => Players.PlayersStates.Values.All(playerState => playerState.IsReady);
    private UserDto? _loggedUser = null;
    private Guest? _guest = null;
    private string? _userName = string.Empty;
    private bool _isNotConnected = false;
    private bool _isGameStarted = false;


    protected override async Task OnInitializedAsync()
    {
        _loggedUser = await UserRepository.GetLoggedUser();

        try
        {
            HubConnection = new HubConnectionBuilder().
                WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).
                Build();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return;
        }

        HubConnection.On<PlayersInLobby>("PlayerJoined", (players) =>
        {

            foreach (var player in Players.Users)
            {
                players.PlayersStates[player.ConnectionId].IsReady = Players.PlayersStates[player.ConnectionId].IsReady;

            }
            foreach (var player in Players.Guests)
            {
                players.PlayersStates[player.ConnectionId].IsReady = Players.PlayersStates[player.ConnectionId].IsReady;
            }
            Players = players;
            StateHasChanged();
        });

        //TODO: Switch ChangeReadyState to ChangePlayerState
        HubConnection.On<string>("OnPlayerChangedReadyState", (connectionId) =>
        {
            Players.PlayersStates[connectionId].IsReady = !Players.PlayersStates[connectionId].IsReady;
            StateHasChanged();
        });

        HubConnection.On<bool>("OnGameStarted", (val) =>
        {
            if (val == true)
                _isGameStarted = true;
            StateHasChanged();
        });

        HubConnection.On<string, int>("OnPointsChanged", (connectionId, points) =>
        {
            Players.PlayersStates[connectionId].Points = points;
            StateHasChanged();
        });

        HubConnection.On<string>("OnPlayerDisconnect", (connectionId) =>
        {
            var playerToRemove = Players.Users.FirstOrDefault(player => player.ConnectionId == connectionId);
            if (playerToRemove != null)
            {
                Players.Users.Remove(playerToRemove);
            }
            else
            {
                Players.Guests.Remove(Players.Guests.FirstOrDefault(player => player.ConnectionId == connectionId)!);
            }
        });

        //TODO: Score listener

        await HubConnection.StartAsync();

        if (_loggedUser == null)
        {
            _guest = new Guest { ConnectionId = HubConnection.ConnectionId!, Username = HubConnection.ConnectionId! };
            _userName = HubConnection.ConnectionId;
        }
        else
        {
            _loggedUser.ConnectionId = HubConnection.ConnectionId!;
            _userName = _loggedUser.Username;
        }


        //Create Room in SignalR if the client is host
        CurrentRoom = await HubConnection.InvokeAsync<RoomDto>("OpenRoom", RoomCode, _loggedUser, _guest);
        //Else join the room
        if(CurrentRoom == null)
        {
            CurrentRoom = await HubConnection.InvokeAsync<RoomDto>("JoinRoom", RoomCode, _loggedUser, _guest);
            if(CurrentRoom == null)
            {
                _isNotConnected = true;
            }

        }
    }

    async Task HandleReadyButton()
    {
        if (HubConnection != null)
            await HubConnection.InvokeAsync("ChangePlayerReadyState", RoomCode, HubConnection.ConnectionId);
    }

    async Task HandlePlayButton()
    {
        if (HubConnection != null)
             await HubConnection.InvokeAsync("StartGame", RoomCode, true);
    }



    
}
