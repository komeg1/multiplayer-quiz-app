@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer
@attribute [Authorize(Roles = "LoggedUser")]
@inject IUserRepository UserRepository

@page "/user-page"


@if (_userDto != null)
{
    <div class="p-4">
        <div class="bg-white/20 backdrop-blur-lg shadow-lg w-full md:max-w-4xl rounded-lg p-1">

            <div class="pt-4 pl-4 text-2xl font-bold text-white transition-colors duration-300 ease-in-out hover:text-blue-700">
                <span>Hello, @_username</span>
            </div>
            <div>
                <span>Upload avatar</span>
                <InputFile OnChange="OnFileUploadChange"/>
            </div>
            <div class="p-1">
                <span class="bg-yellow-100 text-yellow-800 text-sm font-medium me-2 px-2.5 py-0.5 rounded dark:bg-yellow-900 dark:text-yellow-300">Level @_userDto.Level</span>
            </div>
            <div class="p-1">
                <div class="w-1/2 bg-gray-200 rounded-full dark:bg-gray-700">
                    <div class="bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full" style="width: @(_levelProgressInPercent)%"> @(_levelProgressInPercent)%</div>
                </div>
            </div>

        </div>
    </div>
    <div class="p-4">
        <div class="bg-white/20 backdrop-blur-lg shadow-lg w-full md:max-w-4xl rounded-lg p-1">
            <GameHistory UserId="int.Parse(_userId)"/>
        </div>
    </div>
}



@code {

    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _username = string.Empty;
    private string _userId = string.Empty;
    private UserDto _userDto;
    private int _levelProgressInPercent;
    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userState = authState.User;

        if (userState.Identity is not null && userState.Identity.IsAuthenticated)
        {
            _claims = userState.Claims;
            _username = _claims.FirstOrDefault(c => c.Type is ClaimTypes.Name)?.Value;
            _userId   = _claims.FirstOrDefault(c => c.Type is "id")?.Value;
        }
        if(_userId != string.Empty)
        {
            _userDto = await UserRepository.GetUserDtoByIdAsync(Int32.Parse(_userId));
            SetLevelProgress();
        }
    }

    protected async Task OnFileUploadChange(InputFileChangeEventArgs e)
    {

    }

    void SetLevelProgress()
    {
        _levelProgressInPercent = _userDto.Experience % 100;
        StateHasChanged();
    }


}
